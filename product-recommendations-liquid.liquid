<link rel="stylesheet" href="{{ 'component-card.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-price.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'section-product-recommendations.css' | asset_url }}" media="print" onload="this.media='all'">

<noscript>{{ 'component-card.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-price.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'section-product-recommendations.css' | asset_url | stylesheet_tag }}</noscript>

<style>
  #apps-section-{{ section.id }} .featured-collection-electronic .card-wrapper{
    border: 1px solid {{ settings.color_input_border}};
  }
  #apps-section-{{ section.id }} .featured-collection-electronic .card-wrapper .card--product{
    border-bottom: 1px solid {{ settings.color_input_border}};
  }
  #apps-section-{{ section.id }} .featured-collection-jewel .card-wrapper .card--product{
    border-bottom: 1px solid {{ settings.color_input_border}};
  }
  #apps-section-{{ section.id }} .featured-collection-food .card-wrapper{
    border: 1px solid {{ settings.color_input_border}};
    border-radius: {{ settings.product_card_border_radius }}px;
  }
  #apps-section-{{ section.id }} .featured-collection-food .card-wrapper .card--product{
    border-radius: {{ settings.product_card_border_radius }}px {{ settings.product_card_border_radius }}px 0 0;
  }
</style>

<div class="product__recommendations page-width">
  <product-recommendations class="product-recommendations section-{{ section.id }}-padding isolate" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">
    {% if recommendations.performed and recommendations.products_count > 0 %}
      <h2 class="product-recommendations__heading {{ section.settings.heading_size }}">{{ section.settings.heading | escape }}</h2>
      <ul class="is-flex columns is-multiline is-gapless featured-collection-{{ settings.style }}" role="list">
        {% for recommendation in recommendations.products %}
          {%- unless recommendation.tags contains 'is-hidden' -%}
            <li class="column is-3-desktop is-4-tablet is-6-mobile">
              {% if settings.style == 'fashion' %}
                {% render 'fashion-product-card',
                  media_size: settings.image_ratio,
                  product_card_product: recommendation
                %}
              {% elsif settings.style == 'electronic' %}
              {% render 'electronic-product-card',
                media_size: settings.image_ratio,
                product_card_product: recommendation
              %}
              {% elsif settings.style == 'jewel' %}
              {% render 'jewel-product-card',
                media_size: settings.image_ratio,
                product_card_product: recommendation
              %}
              {% elsif settings.style == 'food' %}
              {% render 'food-product-card',
                media_size: settings.image_ratio,
                product_card_product: recommendation
              %}
              {% else %}
              {% render 'product-card',
                media_size: settings.image_ratio,
                product_card_product: recommendation
              %}
            {% endif %}
            </li>
          {%- endunless -%}
        {% endfor %}
      </ul>
    {% endif %}
  </product-recommendations>
</div>

{% javascript %}
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();

      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;

        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('product-recommendations');

            
            if (recommendations && recommendations.innerHTML.trim().length) {
              this.innerHTML = recommendations.innerHTML;
            }

            if (html.querySelector('.grid__item')) {
              this.classList.add('product-recommendations--loaded');
            }
            animateElements();
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
{
  "name": "Section name",
  "tag": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.product-recommendations.settings.paragraph__1.content"
    },
    {
      "type": "text",
      "id": "heading",
      "default": "You may also like",
      "label": "t:sections.product-recommendations.settings.heading.label"
    }
  ]
}
{% endschema %}
